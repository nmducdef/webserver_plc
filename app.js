////////////////////////////// H·ªÜ TH·ªêNG //////////////////////////////
const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');
const http = require('http'); 
const cookieParser = require('cookie-parser');

// Server HTTP cho Express
const appExpress = express();
const serverExpress = http.createServer(appExpress);

// C·∫•u h√¨nh ·ª©ng d·ª•ng Express
appExpress.use(express.static(path.join(__dirname, 'public')));
appExpress.use(bodyParser.urlencoded({ extended: true }));
appExpress.use(cookieParser());

// Ki·ªÉm tra ƒëƒÉng nh·∫≠p cookies
function checkAuth(req, res, next) {
    if (req.cookies.loggedIn === 'true') {
        next();
    } else {
        res.redirect('/');
    }
}

// ƒê·ªãnh tuy·∫øn Express
const loginRoutes = require('./public/js/login');
appExpress.use('/', loginRoutes);

// G·ªçi trang home
appExpress.get(['/home', '/home.html'], checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'home.html'));
});

// G·ªçi trang ch·∫ø ƒë·ªô b·∫±ng tay
appExpress.get(['/manu', '/manu.html'], checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'views', 'manu.html'));
});



////////////////////////////// C·ªîNG K·∫æT N·ªêI //////////////////////////////
// L·∫Øng nghe c·ªïng Express (3000)
serverExpress.listen(3000, () => {
    console.log('Express server ch·∫°y t·∫°i http://localhost:3000');
});




////////////////////////////// C·ªîNG K·∫æT N·ªêI //////////////////////////////
// Server HTTP cho Socket.IO
const socketIO = require('socket.io');
const appSocket = express();
const serverSocket = http.createServer(appSocket);
const io = socketIO(serverSocket); // Socket.IO server
// L·∫Øng nghe c·ªïng Socket.IO (5000)
serverSocket.listen(4000, () => {
    console.log('Socket.IO server ch·∫°y t·∫°i http://localhost:4000');
});


// Nh·∫≠n c√°c b·ª©c ƒëi·ªán ƒë∆∞·ª£c g·ª≠i t·ª´ tr√¨nh duy·ªát
io.on("connection", (socket) => {
    console.log(`K·∫øt n·ªëi m·ªõi t·ª´ local: ${socket.id}`);

    socket.on("Client-send-data", (data) => {
        console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ local:", data); //
        Local_PLCtags_Readed = data;
    });
});



// API hi·ªÉn th·ªã gi√° tr·ªã tag ƒë·ªçc ƒë∆∞·ª£c l√™n tr√¨nh duy·ªát
var Local_PLCtags_Readed;
appExpress.get('/api/tags_show', (req, res) => {
    res.json(Local_PLCtags_Readed);
});






// ############################################################################################
//                                  GHI D·ªÆ LI·ªÜU IO FILED
// ############################################################################################
// üõ† H√†m d√πng chung ƒë·ªÉ x·ª≠ l√Ω API v√† ph√°t t√≠n hi·ªáu t·ªõi local
const IOFiledAPI = (api) => {
    appExpress.post(api, express.json(), (req, res) => {
        const receivedData = req.body;
        console.log(`üìå API: ${api}, D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:`, receivedData);

        // Ph√°t t√≠n hi·ªáu t·ªõi local th√¥ng qua WebSocket
        io.sockets.emit(api, receivedData);

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho client
        res.status(200).json({
            success: true,
            message: `D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng t·∫°i ${api}!`,
            data: receivedData
        });
    });
};


///////////////////////////////////////////////////////////////////////////////////////////////
// üõ† Ghi d·ªØ li·ªáu xu·ªëng PLC - cho io filed
IOFiledAPI("/api/cai_dat_thong_so");




// ############################################################################################
//                                  N√öT NH·∫§N ƒêI·ªÄU KHI·ªÇN
// ############################################################################################
// H√†m d√πng chung ƒë·ªÉ x·ª≠ l√Ω n√∫t nh·∫•n
const ButtonAPI = (api, value) => {
    appExpress.post(api, (req, res) => {
        try {
            console.log(`API: ${api}, Gi√° tr·ªã: ${value}`);
            res.status(200).send({ message: `N√∫t nh·∫•n t·∫°i ${api} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.` });
            io.sockets.emit(api, value); // Ph√°t t√≠n hi·ªáu t·ªõi local
        } catch (error) {
            console.error(`L·ªói khi x·ª≠ l√Ω API ${api}:`, error.message);
            res.status(500).send({ message: `ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω API ${api}` });
        }
    });
};


///////////////////////////////////////////////////////////////////////////////////////////////
// S·ª≠ d·ª•ng cho n√∫t nh·∫•n - M√†n ch·∫ø ƒë·ªô t·ª± ƒë·ªông
ButtonAPI('/api/btt_Auto_On', true);
ButtonAPI('/api/btt_Manu_On', true);
ButtonAPI('/api/btt_Auto_Confirm_On', true);


// S·ª≠ d·ª•ng cho n√∫t nh·∫•n - m√†n h√¨nh ch·∫ø ƒë·ªô b·∫±ng tay
ButtonAPI('/api/btt_V1_Open', true);
ButtonAPI('/api/btt_V2_Open', true);
ButtonAPI('/api/btt_V3_Open', true);

ButtonAPI('/api/btt_V1_Close', true);
ButtonAPI('/api/btt_V2_Close', true);
ButtonAPI('/api/btt_V3_Close', true);

ButtonAPI('/api/btt_DC_Tron_Run', true);
ButtonAPI('/api/btt_DC_Tron_Stop', true);
